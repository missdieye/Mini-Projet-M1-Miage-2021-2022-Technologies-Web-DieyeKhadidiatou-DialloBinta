{"remainingRequest":"C:\\Users\\binet\\OneDrive\\Documents\\GitHub\\Mini-Projet-M1-Miage-2021-2022-Technologies-Web-DieyeKhadidiatou-DialloBinta\\client\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\binet\\OneDrive\\Documents\\GitHub\\Mini-Projet-M1-Miage-2021-2022-Technologies-Web-DieyeKhadidiatou-DialloBinta\\client\\src\\components\\Menu.vue?vue&type=template&id=9bcc0be2&scoped=true&","dependencies":[{"path":"C:\\Users\\binet\\OneDrive\\Documents\\GitHub\\Mini-Projet-M1-Miage-2021-2022-Technologies-Web-DieyeKhadidiatou-DialloBinta\\client\\src\\components\\Menu.vue","mtime":1636122927812},{"path":"C:\\Users\\binet\\OneDrive\\Documents\\GitHub\\Mini-Projet-M1-Miage-2021-2022-Technologies-Web-DieyeKhadidiatou-DialloBinta\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1636063119778},{"path":"C:\\Users\\binet\\OneDrive\\Documents\\GitHub\\Mini-Projet-M1-Miage-2021-2022-Technologies-Web-DieyeKhadidiatou-DialloBinta\\client\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1636063137676},{"path":"C:\\Users\\binet\\OneDrive\\Documents\\GitHub\\Mini-Projet-M1-Miage-2021-2022-Technologies-Web-DieyeKhadidiatou-DialloBinta\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1636063119778},{"path":"C:\\Users\\binet\\OneDrive\\Documents\\GitHub\\Mini-Projet-M1-Miage-2021-2022-Technologies-Web-DieyeKhadidiatou-DialloBinta\\client\\node_modules\\vue-loader\\lib\\index.js","mtime":1636063137674}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}