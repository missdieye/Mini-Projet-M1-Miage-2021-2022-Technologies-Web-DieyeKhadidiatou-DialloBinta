{"remainingRequest":"D:\\UCA\\TechnosWeb\\tp3\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\UCA\\TechnosWeb\\tp3\\src\\components\\ListeRestaurants.vue?vue&type=style&index=0&id=4f6ebf7f&scoped=true&lang=css&","dependencies":[{"path":"D:\\UCA\\TechnosWeb\\tp3\\src\\components\\ListeRestaurants.vue","mtime":1633419192809},{"path":"D:\\UCA\\TechnosWeb\\tp3\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\UCA\\TechnosWeb\\tp3\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"D:\\UCA\\TechnosWeb\\tp3\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"D:\\UCA\\TechnosWeb\\tp3\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\UCA\\TechnosWeb\\tp3\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoNCmgxew0KICAgIGNvbG9yOiBibHVlOw0KfQ0K"},{"version":3,"sources":["ListeRestaurants.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmJA;AACA;AACA","file":"ListeRestaurants.vue","sourceRoot":"src/components","sourcesContent":["\r\n<template>\r\n  <div >\r\n      <table>\r\n        <tr>\r\n            <th>Nom</th>\r\n            <th>Cuisine </th>\r\n        </tr>\r\n        <tbody>\r\n            <tr \r\n                v-for=\"{r,index } in restaurants\" \r\n                :key=\"index\"\r\n                v-on:click=\"supprimerRestaurant(r)\"\r\n                v-bind:style=\"{backgroundColor:getColor(index)}\" \r\n                v-bind:class=\"{bordureRouge:(index === 2)}\"\r\n            >\r\n                <td>{{r.name}}</td>\r\n                <td> {{r.cuisine}}</td>\r\n            </tr>\r\n        </tbody>\r\n    </table>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'ListeRestaurants',\r\n  props: {\r\n    msg: String\r\n  },\r\n  data: function(){\r\n      return {\r\n            restaurants: [],\r\n            nom: '',\r\n            cuisine: '',\r\n            nombreRestaurantsTotal: 0,\r\n            page: 0,\r\n            pageSize: 10,\r\n            nbrePagesTotal: 0,\r\n            msg: '',\r\n            nomRestoRechercher: ''\r\n        }\r\n    },\r\n        mounted() {\r\n            this.getRestaurantsFromServer();\r\n        }\r\n        ,\r\n        methods: {\r\n            pagePrecedente() {\r\n                if (this.page == 0) return;\r\n\r\n                this.page--;\r\n                this.getRestaurantsFromServer();\r\n            },\r\n            pageSuivante() {\r\n                if (this.page === this.dernierePage) return;\r\n                this.page++;\r\n                this.getRestaurantsFromServer();\r\n            },\r\n            getRestaurantsFromServer() {\r\n                let url = \"http://localhost:8080/api/restaurants?\";\r\n                url += \"page=\" + this.page;\r\n                url += \"&pagesize=\" + this.pageSize;\r\n                url += \"&name=\" + this.nomRestoRechercher;\r\n\r\n                fetch(url)\r\n                    .then((responseJSON) => {//arow fonction conserve le bon \"this\".\r\n                        responseJSON.json()\r\n                            .then((resJs) => {\r\n                                // Maintenant resJs est un vrai objet JavaScript\r\n                                this.restaurants = resJs.data;\r\n                                this.nombreRestaurantsTotal = resJs.count;\r\n                                this.nbrePagesTotal = Math.round(this.nombreRestaurantsTotal / this.pageSize);\r\n                            });\r\n                    })\r\n                    .catch((err) => {\r\n                        console.log(err);\r\n                    });\r\n            },\r\n            chercherResto:\r\n                _.debounce(function () {\r\n                    this.getRestaurantsFromServer();\r\n                }, 1000),\r\n            supprimerRestaurant(r) {\r\n                let url = \"http://localhost:8080/api/restaurants/\" + r._id;\r\n                \r\n                fetch(url, {\r\n                    method: \"DELETE\",\r\n                    \r\n                })\r\n                    .then((responseJSON) => {\r\n                        responseJSON.json()\r\n                            .then((res) => {\r\n                                // Maintenant res est un vrai objet JavaScript\r\n                                console.log(res.msg);\r\n                                this.msg = res.msg;\r\n\r\n                                //On raffraichit la vue\r\n                                this.getRestaurantsFromServer();\r\n                            });\r\n                    })\r\n                    .catch(function (err) {\r\n                        console.log(err);\r\n                    });\r\n            },\r\n            ajouterRestaurant(event) {\r\n                // Récupération du formulaire. Pas besoin de document.querySelector\r\n                // ou document.getElementById puisque c'est le formulaire qui a généré\r\n                // l'événement\r\n                let form = event.target;\r\n\r\n                // Récupération des valeurs des champs du formulaire\r\n                // en prévision d'un envoi multipart en ajax/fetch\r\n                let donneesFormulaire = new FormData(form);\r\n\r\n                let url = \"http://localhost:8080/api/restaurants\";\r\n\r\n                fetch(url, {\r\n                    method: \"POST\",\r\n                    body: donneesFormulaire\r\n                })\r\n                    .then((responseJSON) => {\r\n                        responseJSON.json()\r\n                            .then((res) => {\r\n                                // Maintenant res est un vrai objet JavaScript\r\n                                console.log(res.msg);\r\n                                this.msg = res.msg;\r\n\r\n                                //On raffraichit la vue\r\n                                this.getRestaurantsFromServer();\r\n                            });\r\n                    })\r\n                    .catch(function (err) {\r\n                        console.log(err);\r\n                    });\r\n                this.nom = \"\";\r\n                this.cuisine = \"\";\r\n            },\r\n            getColor(index) {\r\n                return (index % 2) ? 'lightBlue' : 'pink';\r\n            }\r\n        }\r\n}\r\n</script>\r\n\r\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\r\n<style scoped>\r\nh1{\r\n    color: blue;\r\n}\r\n</style>\r\n"]}]}