{"remainingRequest":"C:\\Users\\binet\\OneDrive\\Documents\\GitHub\\Mini-Projet-M1-Miage-2021-2022-Technologies-Web-DieyeKhadidiatou-DialloBinta\\client\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\binet\\OneDrive\\Documents\\GitHub\\Mini-Projet-M1-Miage-2021-2022-Technologies-Web-DieyeKhadidiatou-DialloBinta\\client\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\binet\\OneDrive\\Documents\\GitHub\\Mini-Projet-M1-Miage-2021-2022-Technologies-Web-DieyeKhadidiatou-DialloBinta\\client\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\binet\\OneDrive\\Documents\\GitHub\\Mini-Projet-M1-Miage-2021-2022-Technologies-Web-DieyeKhadidiatou-DialloBinta\\client\\src\\components\\CarteDesPlats.vue?vue&type=template&id=469b3b17&scoped=true&","dependencies":[{"path":"C:\\Users\\binet\\OneDrive\\Documents\\GitHub\\Mini-Projet-M1-Miage-2021-2022-Technologies-Web-DieyeKhadidiatou-DialloBinta\\client\\src\\components\\CarteDesPlats.vue","mtime":1635530355915},{"path":"C:\\Users\\binet\\OneDrive\\Documents\\GitHub\\Mini-Projet-M1-Miage-2021-2022-Technologies-Web-DieyeKhadidiatou-DialloBinta\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1635368969597},{"path":"C:\\Users\\binet\\OneDrive\\Documents\\GitHub\\Mini-Projet-M1-Miage-2021-2022-Technologies-Web-DieyeKhadidiatou-DialloBinta\\client\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1635368981291},{"path":"C:\\Users\\binet\\OneDrive\\Documents\\GitHub\\Mini-Projet-M1-Miage-2021-2022-Technologies-Web-DieyeKhadidiatou-DialloBinta\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1635368969597},{"path":"C:\\Users\\binet\\OneDrive\\Documents\\GitHub\\Mini-Projet-M1-Miage-2021-2022-Technologies-Web-DieyeKhadidiatou-DialloBinta\\client\\node_modules\\vue-loader\\lib\\index.js","mtime":1635368981287}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}