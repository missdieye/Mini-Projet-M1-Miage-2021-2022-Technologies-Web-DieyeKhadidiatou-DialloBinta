{"remainingRequest":"D:\\UCA\\TechnosWeb\\Mini Projet M1 Miage 2021-2022 Technologies Web\\client\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\UCA\\TechnosWeb\\Mini Projet M1 Miage 2021-2022 Technologies Web\\client\\src\\components\\Menu.vue?vue&type=template&id=9bcc0be2&","dependencies":[{"path":"D:\\UCA\\TechnosWeb\\Mini Projet M1 Miage 2021-2022 Technologies Web\\client\\src\\components\\Menu.vue","mtime":1636043857130},{"path":"D:\\UCA\\TechnosWeb\\Mini Projet M1 Miage 2021-2022 Technologies Web\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\UCA\\TechnosWeb\\Mini Projet M1 Miage 2021-2022 Technologies Web\\client\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\UCA\\TechnosWeb\\Mini Projet M1 Miage 2021-2022 Technologies Web\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\UCA\\TechnosWeb\\Mini Projet M1 Miage 2021-2022 Technologies Web\\client\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CiAgPGRpdiA+CiAgICA8bWQtdG9vbGJhciBtZC1lbGV2YXRpb249IjEiIGNsYXNzPSJtZC1hY2NlbnQgaW5mb3MiPgogICAgPGkgY2xhc3M9ImluZm9zIj5Qb3VyIGNoYXF1ZSBtZW51LCBjaG9pc2lzc2V6IHVuPGI+IEhvcnMgZCdPZXV2cmVzPC9iPiAsCiAgICAgdW4gPGI+UGxhdDwvYj4gLCB1biA8Yj5EZXNzZXJ0PC9iPiAgZXQgdW4gPGI+Ym9pc3NvbjwvYj4uIExlIHRvdXQgcG91ciB1biBwcml4ITwvaT4gCiAgPC9tZC10b29sYmFyPgogICAgPGRpdiBjbGFzcz0idmlld3BvcnQiPgogICAgICA8bWQtdG9vbGJhciA6bWQtZWxldmF0aW9uPSIxIj4KICAgICAgICA8c3BhbiBjbGFzcz0ibWQtdGl0bGUiPk1lbnUgZGUgTWlkaTwvc3Bhbj4KICAgICAgPC9tZC10b29sYmFyPgogICAgICA8ZGl2IGNsYXNzPSJsaXN0Ij4KICAgICAgICA8bWQtbGlzdCA+CiAgICAgICAgICA8bWQtbGlzdC1pdGVtIG1kLWV4cGFuZD4KICAgICAgICAgICAgPG1kLXRvb2xiYXIgOm1kLWVsZXZhdGlvbj0iMCI+CiAgICAgICAgICAgICAgPG1kLWljb24+cmVzdGF1cmFudDwvbWQtaWNvbj4KICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWQtbGlzdC1pdGVtLXRleHQgbWQtdGl0bGUiPkhvcnMgZCdPZXV2cmVzPC9zcGFuPgogICAgICAgICAgICA8L21kLXRvb2xiYXI+CiAgICAgICAgICAgIDxtZC1saXN0IHNsb3Q9Im1kLWV4cGFuZCI+CiAgICAgICAgICAgICAgPG1kLWxpc3QtaXRlbSBjbGFzcz0iIiB2LWZvcj0iaG9yZE9ldXZyZU1pZGkgaW4gdGhpcy5ob3JkT2V1dnJlc01pZGkiIDprZXk9ImhvcmRPZXV2cmVNaWRpIj4KICAgICAgICAgICAgICAgIDxtZC1jYXJkIGNsYXNzPSJtZC1wcmltYXJ5IG1kLWNhcmQgIiBtZC10aGVtZT0iZ3JlZW4tY2FyZCI+CiAgICAgICAgICAgICAgICAgIDxtZC1jYXJkLWhlYWRlcj4KICAgICAgICAgICAgICAgICAgICA8bWQtY2FyZC1tZWRpYT4KICAgICAgICAgICAgICAgICAgICAgIDxpbWcgOnNyYz0icmVxdWlyZSgnLi4vYXNzZXRzL2hvcnNPZXV2cmVzLycgKyBob3JkT2V1dnJlc1tob3JkT2V1dnJlTWlkaV0uc3JjICkiIGFsdD0iQXZhdGFyIj4KICAgICAgICAgICAgICAgICAgICA8L21kLWNhcmQtbWVkaWE+CgogICAgICAgICAgICAgICAgICAgIDxtZC1jYXJkLWhlYWRlci10ZXh0PgogICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWQtdGl0bGUiPnt7aG9yZE9ldXZyZXNbaG9yZE9ldXZyZU1pZGldLm5vbX19PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICA8L21kLWNhcmQtaGVhZGVyLXRleHQ+CiAgICAgICAgICAgICAgICAgIDwvbWQtY2FyZC1oZWFkZXI+CiAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPC9tZC1jYXJkPgogICAgICAgICAgICAgIDwvbWQtbGlzdC1pdGVtPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIDwvbWQtbGlzdD4KICAgICAgICAgIDwvbWQtbGlzdC1pdGVtPgogICAgICAgICAgPG1kLWxpc3QtaXRlbSBtZC1leHBhbmQ+CiAgICAgICAgICAgIDxtZC10b29sYmFyIDptZC1lbGV2YXRpb249IjAiPgogICAgICAgICAgICAgIDxtZC1pY29uPmRpbm5lcl9kaW5pbmc8L21kLWljb24+CiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im1kLWxpc3QtaXRlbS10ZXh0IG1kLXRpdGxlIj5QbGF0czwvc3Bhbj4KICAgICAgICAgICAgPC9tZC10b29sYmFyPgogICAgICAgICAgICA8bWQtbGlzdCBzbG90PSJtZC1leHBhbmQiPgogICAgICAgICAgICAgIDxtZC1saXN0LWl0ZW0gY2xhc3M9IiIgdi1mb3I9InBsYXRNaWRpIGluIHRoaXMucGxhdHNNaWRpIiA6a2V5PSJwbGF0TWlkaSI+CiAgICAgICAgICAgICAgICA8bWQtY2FyZCBjbGFzcz0ibWQtcHJpbWFyeSBtZC1jYXJkICIgbWQtdGhlbWU9ImdyZWVuLWNhcmQiPgogICAgICAgICAgICAgICAgICA8bWQtY2FyZC1oZWFkZXI+CiAgICAgICAgICAgICAgICAgICAgPG1kLWNhcmQtbWVkaWE+CiAgICAgICAgICAgICAgICAgICAgICA8aW1nIDpzcmM9InJlcXVpcmUoJy4uL2Fzc2V0cy9wbGF0cy8nICsgcGxhdHNbcGxhdE1pZGldLnNyYyApIiBhbHQ9IkF2YXRhciI+CiAgICAgICAgICAgICAgICAgICAgPC9tZC1jYXJkLW1lZGlhPgoKICAgICAgICAgICAgICAgICAgICA8bWQtY2FyZC1oZWFkZXItdGV4dD4KICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1kLXRpdGxlIj57e3BsYXRzW3BsYXRNaWRpXS5ub219fTwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgPC9tZC1jYXJkLWhlYWRlci10ZXh0PgogICAgICAgICAgICAgICAgICA8L21kLWNhcmQtaGVhZGVyPgogICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvbWQtY2FyZD4KICAgICAgICAgICAgICA8L21kLWxpc3QtaXRlbT4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICA8L21kLWxpc3Q+CiAgICAgICAgICA8L21kLWxpc3QtaXRlbT4KICAgICAgICAgIDxtZC1saXN0LWl0ZW0gbWQtZXhwYW5kID4KICAgICAgICAgICAgPG1kLXRvb2xiYXIgOm1kLWVsZXZhdGlvbj0iMCI+CiAgICAgICAgICAgICAgPG1kLWljb24+Y2FrZTwvbWQtaWNvbj4KICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWQtbGlzdC1pdGVtLXRleHQgbWQtdGl0bGUiPkRlc3NlcnRzPC9zcGFuPgogICAgICAgICAgICA8L21kLXRvb2xiYXI+CiAgICAgICAgICAgIDxtZC1saXN0IHNsb3Q9Im1kLWV4cGFuZCI+CiAgICAgICAgICAgICAgPG1kLWxpc3QtaXRlbSBjbGFzcz0iIiB2LWZvcj0iZGVzc2VydE1pZGkgaW4gdGhpcy5kZXNzZXJ0c01pZGkiIDprZXk9ImRlc3NlcnRNaWRpIj4KICAgICAgICAgICAgICAgIDxtZC1jYXJkIGNsYXNzPSJtZC1wcmltYXJ5IG1kLWNhcmQgIiBtZC10aGVtZT0iZ3JlZW4tY2FyZCI+CiAgICAgICAgICAgICAgICAgIDxtZC1jYXJkLWhlYWRlcj4KICAgICAgICAgICAgICAgICAgICA8bWQtY2FyZC1tZWRpYT4KICAgICAgICAgICAgICAgICAgICAgIDxpbWcgOnNyYz0icmVxdWlyZSgnLi4vYXNzZXRzL2Rlc3NlcnRzLycgKyBkZXNzZXJ0c1tkZXNzZXJ0TWlkaV0uc3JjICkiIGFsdD0iQXZhdGFyIj4KICAgICAgICAgICAgICAgICAgICA8L21kLWNhcmQtbWVkaWE+CgogICAgICAgICAgICAgICAgICAgIDxtZC1jYXJkLWhlYWRlci10ZXh0PgogICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWQtdGl0bGUiPnt7ZGVzc2VydHNbZGVzc2VydE1pZGldLm5vbX19PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICA8L21kLWNhcmQtaGVhZGVyLXRleHQ+CiAgICAgICAgICAgICAgICAgIDwvbWQtY2FyZC1oZWFkZXI+CiAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPC9tZC1jYXJkPgogICAgICAgICAgICAgIDwvbWQtbGlzdC1pdGVtPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIDwvbWQtbGlzdD4KICAgICAgICAgIDwvbWQtbGlzdC1pdGVtPiAKICAgICAgICAgIDxtZC1saXN0LWl0ZW0gbWQtZXhwYW5kID4KICAgICAgICAgICAgPG1kLXRvb2xiYXIgOm1kLWVsZXZhdGlvbj0iMCI+CiAgICAgICAgICAgICAgPG1kLWljb24+bG9jYWxfYmFyPC9tZC1pY29uPgogICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtZC1saXN0LWl0ZW0tdGV4dCBtZC10aXRsZSI+Qm9pc3NvbnM8L3NwYW4+CiAgICAgICAgICAgIDwvbWQtdG9vbGJhcj4KICAgICAgICAgICAgPG1kLWxpc3Qgc2xvdD0ibWQtZXhwYW5kIj4KICAgICAgICAgICAgICA8bWQtbGlzdC1pdGVtIGNsYXNzPSIiIHYtZm9yPSJib2lzc29uTWlkaSBpbiB0aGlzLmJvaXNzb25zTWlkaSIgOmtleT0iYm9pc3Nvbk1pZGkiPgogICAgICAgICAgICAgICAgPG1kLWNhcmQgY2xhc3M9Im1kLXByaW1hcnkgbWQtY2FyZCAiIG1kLXRoZW1lPSJncmVlbi1jYXJkIj4KICAgICAgICAgICAgICAgICAgPG1kLWNhcmQtaGVhZGVyPgogICAgICAgICAgICAgICAgICAgIDxtZC1jYXJkLW1lZGlhPgogICAgICAgICAgICAgICAgICAgICAgPGltZyA6c3JjPSJyZXF1aXJlKCcuLi9hc3NldHMvYm9pc3NvbnMvJyArIGJvaXNzb25zW2JvaXNzb25NaWRpXS5zcmMgKSIgYWx0PSJBdmF0YXIiPgogICAgICAgICAgICAgICAgICAgIDwvbWQtY2FyZC1tZWRpYT4KCiAgICAgICAgICAgICAgICAgICAgPG1kLWNhcmQtaGVhZGVyLXRleHQ+CiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZC10aXRsZSI+e3tib2lzc29uc1tib2lzc29uTWlkaV0ubm9tfX08L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgIDwvbWQtY2FyZC1oZWFkZXItdGV4dD4KICAgICAgICAgICAgICAgICAgPC9tZC1jYXJkLWhlYWRlcj4KICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8L21kLWNhcmQ+CiAgICAgICAgICAgICAgPC9tZC1saXN0LWl0ZW0+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgPC9tZC1saXN0PgogICAgICAgICAgPC9tZC1saXN0LWl0ZW0+IAogICAgICAgIDwvbWQtbGlzdD4KICAgICAgPC9kaXY+CiAgICAgIDxtZC10b29sYmFyIDptZC1lbGV2YXRpb249IjEiPgogICAgICAgIDxtZC1idXR0b24gY2xhc3M9Im1kLXJhaXNlZCBwcml4IiBkaXNhYmxlZD5Qcml4IDoge3tNYXRoLnJvdW5kKHRoaXMuZ2V0UHJpeCh0aGlzLnByaXhNZW51TWlkaSkqMTAvMTApfX0g4oKsPC9tZC1idXR0b24+CiAgICAgIDwvbWQtdG9vbGJhcj4KICAgIDwvZGl2PgogICAgPGRpdiBjbGFzcz0idmlld3BvcnQiPgogICAgICA8bWQtdG9vbGJhciA6bWQtZWxldmF0aW9uPSIxIj4KICAgICAgICA8c3BhbiBjbGFzcz0ibWQtdGl0bGUiPk1lbnUgR2FzdHJvbm9taXF1ZTwvc3Bhbj4KICAgICAgPC9tZC10b29sYmFyPgogICAgICA8ZGl2IGNsYXNzPSJsaXN0Ij4KICAgICAgICA8bWQtbGlzdCA+CiAgICAgICAgICA8bWQtbGlzdC1pdGVtIG1kLWV4cGFuZD4KICAgICAgICAgICAgPG1kLXRvb2xiYXIgOm1kLWVsZXZhdGlvbj0iMCI+CiAgICAgICAgICAgICAgPG1kLWljb24+cmVzdGF1cmFudDwvbWQtaWNvbj4KICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWQtbGlzdC1pdGVtLXRleHQgbWQtdGl0bGUiPkhvcnMgZCdPZXV2cmVzPC9zcGFuPgogICAgICAgICAgICA8L21kLXRvb2xiYXI+CiAgICAgICAgICAgIDxtZC1saXN0IHNsb3Q9Im1kLWV4cGFuZCI+CiAgICAgICAgICAgICAgPG1kLWxpc3QtaXRlbSBjbGFzcz0iIiB2LWZvcj0iaG9yZE9ldXZyZUdhc3RybyBpbiB0aGlzLmhvcmRPZXV2cmVzR2FzdHJvbm8iIDprZXk9ImhvcmRPZXV2cmVHYXN0cm8iPgogICAgICAgICAgICAgICAgPG1kLWNhcmQgY2xhc3M9Im1kLXByaW1hcnkgbWQtY2FyZCAiIG1kLXRoZW1lPSJncmVlbi1jYXJkIj4KICAgICAgICAgICAgICAgICAgPG1kLWNhcmQtaGVhZGVyPgogICAgICAgICAgICAgICAgICAgIDxtZC1jYXJkLW1lZGlhPgogICAgICAgICAgICAgICAgICAgICAgPGltZyA6c3JjPSJyZXF1aXJlKCcuLi9hc3NldHMvZ2FzdHJvL2hvcnNvZXV2cmVzLycgKyBob3JkT2V1dnJlc0dhc3Ryb1tob3JkT2V1dnJlR2FzdHJvXS5zcmMgKSIgYWx0PSJBdmF0YXIiPgogICAgICAgICAgICAgICAgICAgIDwvbWQtY2FyZC1tZWRpYT4KCiAgICAgICAgICAgICAgICAgICAgPG1kLWNhcmQtaGVhZGVyLXRleHQ+CiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZC10aXRsZSI+e3tob3JkT2V1dnJlc0dhc3Ryb1tob3JkT2V1dnJlR2FzdHJvXS5ub219fTwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgPC9tZC1jYXJkLWhlYWRlci10ZXh0PgogICAgICAgICAgICAgICAgICA8L21kLWNhcmQtaGVhZGVyPgogICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDwvbWQtY2FyZD4KICAgICAgICAgICAgICA8L21kLWxpc3QtaXRlbT4KICAgICAgICAgICAgICAgIAogICAgICAgICAgICA8L21kLWxpc3Q+CiAgICAgICAgICA8L21kLWxpc3QtaXRlbT4KICAgICAgICAgIDxtZC1saXN0LWl0ZW0gbWQtZXhwYW5kPgogICAgICAgICAgICA8bWQtdG9vbGJhciA6bWQtZWxldmF0aW9uPSIwIj4KICAgICAgICAgICAgICA8bWQtaWNvbj5kaW5uZXJfZGluaW5nPC9tZC1pY29uPgogICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtZC1saXN0LWl0ZW0tdGV4dCBtZC10aXRsZSI+UGxhdHM8L3NwYW4+CiAgICAgICAgICAgIDwvbWQtdG9vbGJhcj4KICAgICAgICAgICAgPG1kLWxpc3Qgc2xvdD0ibWQtZXhwYW5kIj4KICAgICAgICAgICAgICA8bWQtbGlzdC1pdGVtIGNsYXNzPSIiIHYtZm9yPSJwbGF0R2FzdHJvIGluIHRoaXMucGxhdHNHYXN0cm9ubyIgOmtleT0icGxhdEdhc3RybyI+CiAgICAgICAgICAgICAgICA8bWQtY2FyZCBjbGFzcz0ibWQtcHJpbWFyeSBtZC1jYXJkICIgbWQtdGhlbWU9ImdyZWVuLWNhcmQiPgogICAgICAgICAgICAgICAgICA8bWQtY2FyZC1oZWFkZXI+CiAgICAgICAgICAgICAgICAgICAgPG1kLWNhcmQtbWVkaWE+CiAgICAgICAgICAgICAgICAgICAgICA8aW1nIDpzcmM9InJlcXVpcmUoJy4uL2Fzc2V0cy9nYXN0cm8vcGxhdHMvJyArIHBsYXRzR2FzdHJvW3BsYXRHYXN0cm9dLnNyYyApIiBhbHQ9IkF2YXRhciI+CiAgICAgICAgICAgICAgICAgICAgPC9tZC1jYXJkLW1lZGlhPgoKICAgICAgICAgICAgICAgICAgICA8bWQtY2FyZC1oZWFkZXItdGV4dD4KICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1kLXRpdGxlIj57e3BsYXRzR2FzdHJvW3BsYXRHYXN0cm9dLm5vbX19PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICA8L21kLWNhcmQtaGVhZGVyLXRleHQ+CiAgICAgICAgICAgICAgICAgIDwvbWQtY2FyZC1oZWFkZXI+CiAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgPC9tZC1jYXJkPgogICAgICAgICAgICAgIDwvbWQtbGlzdC1pdGVtPgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIDwvbWQtbGlzdD4KICAgICAgICAgIDwvbWQtbGlzdC1pdGVtPgogICAgICAgICAgPG1kLWxpc3QtaXRlbSBtZC1leHBhbmQgPgogICAgICAgICAgICA8bWQtdG9vbGJhciA6bWQtZWxldmF0aW9uPSIwIj4KICAgICAgICAgICAgICA8bWQtaWNvbj5jYWtlPC9tZC1pY29uPgogICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJtZC1saXN0LWl0ZW0tdGV4dCBtZC10aXRsZSI+RGVzc2VydHM8L3NwYW4+CiAgICAgICAgICAgIDwvbWQtdG9vbGJhcj4KICAgICAgICAgICAgPG1kLWxpc3Qgc2xvdD0ibWQtZXhwYW5kIj4KICAgICAgICAgICAgICA8bWQtbGlzdC1pdGVtIGNsYXNzPSIiIHYtZm9yPSJkZXNzZXJ0R2FzdHJvIGluIHRoaXMuZGVzc2VydHNHYXN0cm9ubyIgOmtleT0iZGVzc2VydEdhc3RybyI+CiAgICAgICAgICAgICAgICA8bWQtY2FyZCBjbGFzcz0ibWQtcHJpbWFyeSBtZC1jYXJkICIgbWQtdGhlbWU9ImdyZWVuLWNhcmQiPgogICAgICAgICAgICAgICAgICA8bWQtY2FyZC1oZWFkZXI+CiAgICAgICAgICAgICAgICAgICAgPG1kLWNhcmQtbWVkaWE+CiAgICAgICAgICAgICAgICAgICAgICA8aW1nIDpzcmM9InJlcXVpcmUoJy4uL2Fzc2V0cy9nYXN0cm8vZGVzc2VydC8nICsgZGVzc2VydHNHYXN0cm9bZGVzc2VydEdhc3Ryb10uc3JjICkiIGFsdD0iQXZhdGFyIj4KICAgICAgICAgICAgICAgICAgICA8L21kLWNhcmQtbWVkaWE+CgogICAgICAgICAgICAgICAgICAgIDxtZC1jYXJkLWhlYWRlci10ZXh0PgogICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWQtdGl0bGUiPnt7ZGVzc2VydHNHYXN0cm9bZGVzc2VydEdhc3Ryb10ubm9tfX08L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgIDwvbWQtY2FyZC1oZWFkZXItdGV4dD4KICAgICAgICAgICAgICAgICAgPC9tZC1jYXJkLWhlYWRlcj4KICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8L21kLWNhcmQ+CiAgICAgICAgICAgICAgPC9tZC1saXN0LWl0ZW0+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgPC9tZC1saXN0PgogICAgICAgICAgPC9tZC1saXN0LWl0ZW0+IAogICAgICAgIDwvbWQtbGlzdD4KICAgICAgPC9kaXY+CiAgICAgIDxtZC10b29sYmFyIDptZC1lbGV2YXRpb249IjEiPgogICAgICAgIDxtZC1idXR0b24gY2xhc3M9Im1kLXJhaXNlZCBwcml4IiBkaXNhYmxlZD5Qcml4IDoge3t0aGlzLnByaXhNZW51R2FzdHJvfX0g4oKsPC9tZC1idXR0b24+CiAgICAgIDwvbWQtdG9vbGJhcj4KICAgIDwvZGl2PiAgCgogICAgPG1kLXRvb2xiYXIgbWQtZWxldmF0aW9uPSIxIiBjbGFzcz0ibWQtYWNjZW50IGluZm9zIj4KICAgIDxpIGNsYXNzPSJpbmZvcyIgQGNsaWNrPSJ0YWItZ2FsZXJpZT48Q2xpcXVlei1pY2kgcG91ciBwYXNzZXIgdW5lIGNvbW1hbmRlLiAgPC9yb3V0ZXItbGluaz48L2k+IAogICAgPC9tZC10b29sYmFyPgoKICA8L2Rpdj4KCjwvdGVtcGxhdGU+Cgo8c2NyaXB0PgoKZXhwb3J0IGRlZmF1bHQgewoKICBuYW1lOiAnTWVudScsCiAgcHJvcHM6IHsKICAgICAgCiAgfSxtb3VudGVkKCkgewogICAgLy9BcHBlbCBkZXMgRm9uY3Rpb25zIHBvdXIgb2J0ZW5pciBhbMOpYXRvaXJlbWVudCBkZXMgbWVudXMgZGUgbWlkaSBldCBsZXVyIHByaXgKICAgIHRoaXMucHJpeEhPID0gdGhpcy5nZXRtZW51RGVtaWRpKDAsdGhpcy5ob3JkT2V1dnJlcy5sZW5ndGgsdGhpcy5ob3JkT2V1dnJlc01pZGksdGhpcy5ob3JkT2V1dnJlcykvMzsKICAgIHRoaXMucHJpeFBsYXRzID0gdGhpcy5nZXRtZW51RGVtaWRpKDAsdGhpcy5wbGF0cy5sZW5ndGgsdGhpcy5wbGF0c01pZGksdGhpcy5wbGF0cykvMzsKICAgIHRoaXMucHJpeEQgPSB0aGlzLmdldG1lbnVEZW1pZGkoMCx0aGlzLmRlc3NlcnRzLmxlbmd0aCx0aGlzLmRlc3NlcnRzTWlkaSx0aGlzLmRlc3NlcnRzKS8zOwogICAgdGhpcy5wcml4Qj10aGlzLmdldG1lbnVEZW1pZGkoMCx0aGlzLmJvaXNzb25zLmxlbmd0aCx0aGlzLmJvaXNzb25zTWlkaSx0aGlzLmJvaXNzb25zKS8zOwoKICAgIC8vQ2FsY3VsIGR1IHByaXggdG90YWwgZHUgbWVudSBzYW5zIGxlIHBvdXJjZW50YWdlIGRlIHLDqWR1Y3Rpb24KICAgIHRoaXMucHJpeE1lbnVNaWRpPXRoaXMucHJpeEhPK3RoaXMucHJpeFBsYXRzK3RoaXMucHJpeEQrdGhpcy5wcml4RDsKICAgIHRoaXMucHJpeE1lbnVNaWRpPU1hdGgucm91bmQodGhpcy5wcml4TWVudU1pZGkqMTApLzEwOwoKICAgIC8vQXBwZWwgZGVzIEZvbmN0aW9ucyBwb3VyIG9idGVuaXIgYWzDqWF0b2lyZW1lbnQgZGVzIG1lbnVzIEdhc3Ryb25vbWlxdWUgZXQgbGV1ciBwcml4CiAgICB0aGlzLnByaXhIT0cgPSB0aGlzLmdldE1lbnVHYXN0cm9ub21pcXVlKDAsdGhpcy5ob3JkT2V1dnJlc0dhc3Ryby5sZW5ndGgsdGhpcy5ob3JkT2V1dnJlc0dhc3Ryb25vLHRoaXMuaG9yZE9ldXZyZXNHYXN0cm8pLzI7CiAgICB0aGlzLnByaXhQbGF0c0cgPSB0aGlzLmdldE1lbnVHYXN0cm9ub21pcXVlKDAsdGhpcy5wbGF0c0dhc3Ryby5sZW5ndGgsdGhpcy5wbGF0c0dhc3Ryb25vLHRoaXMucGxhdHNHYXN0cm8pLzI7CiAgICB0aGlzLnByaXhERyA9IHRoaXMuZ2V0TWVudUdhc3Ryb25vbWlxdWUoMCx0aGlzLmRlc3NlcnRzR2FzdHJvLmxlbmd0aCx0aGlzLmRlc3NlcnRzR2FzdHJvbm8sdGhpcy5kZXNzZXJ0c0dhc3RybykvMjsKCiAgICAvL0NhbGN1bCBkdSBwcml4IHRvdGFsIGR1IG1lbnUgZ2FzdHJvbm9taXF1ZQogICAgdGhpcy5wcml4TWVudUdhc3Rybz10aGlzLnByaXhIT0crdGhpcy5wcml4UGxhdHNHK3RoaXMucHJpeERHOwogICAgdGhpcy5wcml4TWVudUdhc3Rybz1NYXRoLnJvdW5kKHRoaXMucHJpeE1lbnVHYXN0cm8qMTApLzEwOwoKICAgIGNvbnNvbGUubG9nKCdnamhndmJuLCcsdGhpcy5wcml4TWVudUdhc3RybywgJ2doaicsdGhpcy5nZXRQcml4KHRoaXMucHJpeE1lbnVHYXN0cm8pKQogICAgCiAgfSwgCiAgZGF0YTpmdW5jdGlvbigpewogICAgICByZXR1cm4gewogICAgICAgIGhvcmRPZXV2cmVzIDogWwogICAgICAgICAgeyBpZDoxLCBub206ICdTYWxhZGUgZGUgTMOpZ3VtZXMnLCBzcmM6ICdzYWxhZGVzTGVndW1lcy5qcGcnLCBkZXNjcmlwdGlvbjoiTGEgc2FsYWRlIGNvbXBvc8OpZSBjJ2VzdCB1biB2cmFpIHBsYXQgY29tcGxldC4gVW5lIGJhc2UgZGUgc2FsYWRlcyBkZSB2b3RyZSBjaG9peCBlbiBtw6lsYW5nZSwgZGVzIGhlcmJlcyBhcm9tYXRpcXVlcyBmcmHDrmNoZXMsIHVuZSB2aW5haWdyZXR0ZSBsw6lnw6hyZSBldCB1bmUgZ2Fybml0dXJlIGNob2lzaWUgYXZlYyBzb2luLiIscHJpeDoxMH0sCiAgICAgICAgICB7IGlkOjIsIG5vbTogJ0ZyaXR0ZXMnLCBzcmM6ICdmcml0dGVzLmpwZycsIGRlc2NyaXB0aW9uOiJMYSBmcml0ZSBlc3QgdW4gYsOidG9ubmV0IGRlIHBvbW1lIGRlIHRlcnJlIGN1aXQgcGFyIGZyaXR1cmUgZGFucyB1bmUgZ3JhaXNzZSBhbmltYWxlIG91IHVuZSBodWlsZSB2w6lnw6l0YWxlLiIscHJpeDoxNX0sCiAgICAgICAgICB7IGlkOjMsIG5vbTogJ0ZydWl0cyBkZSBNZXInLCBzcmM6ICdmcnVpdGRlTWVyLmpwZycsIGRlc2NyaXB0aW9uOiJVbiBwbGF0ZWF1IGRlIGZydWl0cyBkZSBtZXIgY29uc3RpdHXDqSBlbnRpw6hyZW1lbnQgZGUgY3J1c3RhY8OpcywgbW9sbHVzcXVlcyBldCBjb3F1aWxsYWdlcyBkZSBtZXIuSWwgZXN0IHNlcnZpIGF2ZWMgZGVzIGNvbmRpbWVudHMgdGVscyBxdWUgc2F1Y2UgbWF5b25uYWlzZSwgc2F1Y2UgY29ja3RhaWwsIGV0IGNpdHJvbiBmcmFpcy4iLHByaXg6MjB9LAogICAgICAgICAgeyBpZDo0LCBub206ICdTYXVtb24nLCBzcmM6ICdzYXVtb24uanBnJywgZGVzY3JpcHRpb246IkxlIHNhdW1vbiBlc3QgZMOpbGljaWV1eCBhdmVjIGRlIG5vbWJyZXV4IGzDqWd1bWVzICEgRXNzYXllei1sZSBhdmVjIGRlcyDDqXBpbmFyZHMsIGRlcyBwb2lyZWF1eCwgZGVzIGNvdXJnZXR0ZXMsIGR1IGNob3UtZmxldXIsIGRlcyBjYXJvdHRlcywgZGVzIHNhbHNpZmlzIG91IGVuY29yZSBkZXMgYnJvY29saXMuIixwcml4OjEyfSwKICAgICAgICAgIHsgaWQ6NSwgbm9tOiAnU2FsYWRlIGRlIFRvbWF0ZScsIHNyYzogJ3NhbGFkZXNUb21hdGVzLmpwZycsIGRlc2NyaXB0aW9uOiLDgCBiYXNlIGRlIHRvbWF0ZXMgZnJhw65jaGVzIGFzc2Fpc29ubsOpZXMgZGUgc8Opc2FtZSBldCBkZSBww6lyaWxsZSwgYydlc3QgbGUgcGFyZmFpdCByZW1vbnRhbnQgYXByw6hzIHVuZSBqb3VybsOpZSBiaWVuIHJlbXBsaWUuIixwcml4OjE0fQogICAgICAgIF0sCiAgICAgICAgcGxhdHMgOiBbCiAgICAgICAgICB7IGlkOjEsIG5vbTogJ0Jyb2NoZXR0ZXMnLCBzcmM6ICdicm9jaGV0dGVzLmpwZycsIGRlc2NyaXB0aW9uOidJcyB0aGlzIHRoaW5nIEZyZW5jaCA/Jyxwcml4OjE0fSwKICAgICAgICAgIHsgaWQ6Miwgbm9tOiAnUGF0dGVzIFRvbWF0ZXMnLCBzcmM6ICdwYXR0ZXNUb21hdGUuanBnJywgZGVzY3JpcHRpb246J01vcm9jY2FuIHBlb3BsZSBzZWVtIHRvIGxvdmUgdGhhdCBkaXNoLi4uJyxwcml4OjE0fSwKICAgICAgICAgIHsgaWQ6Mywgbm9tOiAnUml6IEN1cnJ5Jywgc3JjOiAncml6Q3VycnkuanBnJywgZGVzY3JpcHRpb246J0VhdCBoZWFsdGh5IG15IGJveSEnLHByaXg6MTR9LAogICAgICAgICAgeyBpZDo0LCBub206ICdSaXogUG91bGV0Jywgc3JjOiAncml6UG91bGV0cy5qcGcnLCBkZXNjcmlwdGlvbjonRWF0IGhlYWx0aHkgbXkgYm95IScscHJpeDoxNH0sCiAgICAgICAgICB7IGlkOjUsIG5vbTogJ1N0ZWFrIGV0IEZyaXR0ZXMnLCBzcmM6ICdzdGVha0ZyaXR0ZXMuanBnJywgZGVzY3JpcHRpb246J0VhdCBoZWFsdGh5IG15IGJveSEnLHByaXg6MTR9CiAgICAgICAgXSwKICAgICAgICBkZXNzZXJ0cyA6WwogICAgICAgICAgeyBpZDoxLCBub206ICdCZWlnbmV0IFJvc2UnLCBzcmM6ICdiZWlnbmV0Um9zZVBhaWxsZXR0ZXMuanBnJywgZGVzY3JpcHRpb246J0lzIHRoaXMgdGhpbmcgRnJlbmNoID8nLHByaXg6MTR9LAogICAgICAgICAgeyBpZDoyLCBub206ICdTbW9vdGhpZXMnLCBzcmM6ICdib2NhdXhEZXNzZXJ0LmpwZycsIGRlc2NyaXB0aW9uOidNb3JvY2NhbiBwZW9wbGUgc2VlbSB0byBsb3ZlIHRoYXQgZGlzaC4uLicscHJpeDoxNH0sCiAgICAgICAgICB7IGlkOjMsIG5vbTogJ0Jyb3duaWVzJywgc3JjOiAnYnJvd25pZXMuanBnJywgZGVzY3JpcHRpb246J0VhdCBoZWFsdGh5IG15IGJveSEnLHByaXg6MTR9LAogICAgICAgICAgeyBpZDo0LCBub206ICdHYXRlYXUgRnJhbWJvaXNlJywgc3JjOiAnR2F0ZWF1RnJhbWJvaXNlLmpwZycsIGRlc2NyaXB0aW9uOidFYXQgaGVhbHRoeSBteSBib3khJyxwcml4OjE0fSwKICAgICAgICAgIHsgaWQ6NSwgbm9tOiAnVGFydGUgQ2l0cm91aWxsZScsIHNyYzogJ3RhcnRlQ2l0cm91aWxsZS5qcGcnLCBkZXNjcmlwdGlvbjonRWF0IGhlYWx0aHkgbXkgYm95IScscHJpeDoxNH0sCiAgICAgICAgXSwKICAgICAgICBib2lzc29ucyA6WwogICAgICAgICAgeyBpZDoxLCBub206ICdBbGNvb2wnLCBzcmM6ICdhbGNvb2wuanBnJywgZGVzY3JpcHRpb246J0lzIHRoaXMgdGhpbmcgRnJlbmNoID8nLHByaXg6MTR9LAogICAgICAgICAgeyBpZDoyLCBub206ICdDYWbDqScsIHNyYzogJ2NhZmUuanBnJywgZGVzY3JpcHRpb246J01vcm9jY2FuIHBlb3BsZSBzZWVtIHRvIGxvdmUgdGhhdCBkaXNoLi4uJyxwcml4OjE0fSwKICAgICAgICAgIHsgaWQ6Mywgbm9tOiAnSnVzIGRlIENpdHJvbicsIHNyYzogJ2p1c0NpdHJvbi5qcGcnLCBkZXNjcmlwdGlvbjonRWF0IGhlYWx0aHkgbXkgYm95IScscHJpeDoxNH0sCiAgICAgICAgICB7IGlkOjQsIG5vbTogJ2p1cyBkZSBNZWxvbicsIHNyYzogJ2p1c01lbG9uLmpwZycsIGRlc2NyaXB0aW9uOidFYXQgaGVhbHRoeSBteSBib3khJyxwcml4OjE0fSwKICAgICAgICAgIHsgaWQ6NSwgbm9tOiAnSnVzIGRlIFBvbW1lIGV0IENvbWNvbWJyZScsIHNyYzogJ2p1c1BvbW1lQ29tY29tYnJlLmpwZycsIGRlc2NyaXB0aW9uOidFYXQgaGVhbHRoeSBteSBib3khJyxwcml4OjE0fSwKICAgICAgICBdLAogICAgICAgIGhvcmRPZXV2cmVzR2FzdHJvIDogWwogICAgICAgICAgeyBpZDoxLCBub206ICJGYXJhbmRvbGUgZCdPZXVmcyIsIHNyYzogJ2ZhcmFuZG9sZWRvZXVmcy5qcGcnLCBkZXNjcmlwdGlvbjoiTGEgc2FsYWRlIGNvbXBvc8OpZSBjJ2VzdCB1biB2cmFpIHBsYXQgY29tcGxldC4gVW5lIGJhc2UgZGUgc2FsYWRlcyBkZSB2b3RyZSBjaG9peCBlbiBtw6lsYW5nZSwgZGVzIGhlcmJlcyBhcm9tYXRpcXVlcyBmcmHDrmNoZXMsIHVuZSB2aW5haWdyZXR0ZSBsw6lnw6hyZSBldCB1bmUgZ2Fybml0dXJlIGNob2lzaWUgYXZlYyBzb2luLiIscHJpeDo0MH0sCiAgICAgICAgICB7IGlkOjIsIG5vbTogJ09ldWYgQ29jb3R0ZScsIHNyYzogJ29ldWZjb2NvdHRlLmpwZycsIGRlc2NyaXB0aW9uOiJMYSBmcml0ZSBlc3QgdW4gYsOidG9ubmV0IGRlIHBvbW1lIGRlIHRlcnJlIGN1aXQgcGFyIGZyaXR1cmUgZGFucyB1bmUgZ3JhaXNzZSBhbmltYWxlIG91IHVuZSBodWlsZSB2w6lnw6l0YWxlLiIscHJpeDoxMH0sCiAgICAgICAgICB7IGlkOjMsIG5vbTogJ1BhdHRlIGF1eCBDcm91dGVzIGRlIE1vcmlsbGVzJywgc3JjOiAncGF0ZWNyb3V0ZW1vcmlsbGVzLmpwZycsIGRlc2NyaXB0aW9uOiJVbiBwbGF0ZWF1IGRlIGZydWl0cyBkZSBtZXIgY29uc3RpdHXDqSBlbnRpw6hyZW1lbnQgZGUgY3J1c3RhY8OpcywgbW9sbHVzcXVlcyBldCBjb3F1aWxsYWdlcyBkZSBtZXIuSWwgZXN0IHNlcnZpIGF2ZWMgZGVzIGNvbmRpbWVudHMgdGVscyBxdWUgc2F1Y2UgbWF5b25uYWlzZSwgc2F1Y2UgY29ja3RhaWwsIGV0IGNpdHJvbiBmcmFpcy4iLHByaXg6MzB9LAogICAgICAgICAgeyBpZDo0LCBub206ICdTYWxhZGUgTmljb2lzZScsIHNyYzogJ3NhbGFkZS1uaWNvaXNlLmpwZycsIGRlc2NyaXB0aW9uOiJMZSBzYXVtb24gZXN0IGTDqWxpY2lldXggYXZlYyBkZSBub21icmV1eCBsw6lndW1lcyAhIEVzc2F5ZXotbGUgYXZlYyBkZXMgw6lwaW5hcmRzLCBkZXMgcG9pcmVhdXgsIGRlcyBjb3VyZ2V0dGVzLCBkdSBjaG91LWZsZXVyLCBkZXMgY2Fyb3R0ZXMsIGRlcyBzYWxzaWZpcyBvdSBlbmNvcmUgZGVzIGJyb2NvbGlzLiIscHJpeDoyMH0sCiAgICAgICAgXSwKICAgICAgICBwbGF0c0dhc3RybyA6IFsKICAgICAgICAgIHsgaWQ6MSwgbm9tOiAnQmxhbnF1ZXR0ZSBkZSBWZWF1Jywgc3JjOiAnYmxhbnF1ZXR0ZWRldmVhdS5qcGcnLCBkZXNjcmlwdGlvbjonSXMgdGhpcyB0aGluZyBGcmVuY2ggPycscHJpeDo0MH0sCiAgICAgICAgICB7IGlkOjIsIG5vbTogJ0Nhc3NvdWxldCcsIHNyYzogJ2Nhc3NvdWxldC5qcGcnLCBkZXNjcmlwdGlvbjonTW9yb2NjYW4gcGVvcGxlIHNlZW0gdG8gbG92ZSB0aGF0IGRpc2guLi4nLHByaXg6NDB9LAogICAgICAgICAgeyBpZDozLCBub206ICdGb2llIEdyYXMnLCBzcmM6ICdmb2llZ3Jhcy5qcGcnLCBkZXNjcmlwdGlvbjonRWF0IGhlYWx0aHkgbXkgYm95IScscHJpeDo0MH0sCiAgICAgICAgICB7IGlkOjQsIG5vbTogJ0dhbGV0dGUgZGUgQnJldG9ubmUnLCBzcmM6ICdnYWxldHRlYnJldG9ubmUuanBnJywgZGVzY3JpcHRpb246J0VhdCBoZWFsdGh5IG15IGJveSEnLHByaXg6NDB9LAogICAgICAgIF0sCiAgICAgICAgZGVzc2VydHNHYXN0cm8gOlsKICAgICAgICAgIHsgaWQ6MSwgbm9tOiAnQ2hvY29sYXQgw6AgQ2hvdSBWYW5pbGxlJywgc3JjOiAnY2hvdXZhbmlsbGVjaG9jb2xhdC5qcGcnLCBkZXNjcmlwdGlvbjonSXMgdGhpcyB0aGluZyBGcmVuY2ggPycscHJpeDoyMH0sCiAgICAgICAgICB7IGlkOjIsIG5vbTogJ0lsZSBGbG90dGFudGUgQ3LDqG1lIEFuZ2xhaXNlJywgc3JjOiAnaWxlZmxvdHRhbnRlY3JlbWVhbmdsYWlzZWNhcmFtZWwuanBnJywgZGVzY3JpcHRpb246J01vcm9jY2FuIHBlb3BsZSBzZWVtIHRvIGxvdmUgdGhhdCBkaXNoLi4uJyxwcml4OjIwfSwKICAgICAgICAgIHsgaWQ6Mywgbm9tOiAnTWFkZWxlaW5lcyBUcmFkaXRpb25uZWxsZXMnLCBzcmM6ICdtYWRlbGVpbmVzdHJhZGl0aW9ubmVsbGVzLmpwZycsIGRlc2NyaXB0aW9uOidFYXQgaGVhbHRoeSBteSBib3khJyxwcml4OjIwfSwKICAgICAgICAgIHsgaWQ6NCwgbm9tOiAnVGFydGUgVGFydGluIFBvbW1lJywgc3JjOiAndGFydGV0YXRpbnBvbW1lLmpwZycsIGRlc2NyaXB0aW9uOidFYXQgaGVhbHRoeSBteSBib3khJyxwcml4OjIwfSwKICAgICAgICBdLAogICAgICAgIG1lbnVHYXN0cm9ub21pcXVlOiBbXSwKICAgICAgICBob3JkT2V1dnJlc01pZGkgOiBbXSwKICAgICAgICBwbGF0c01pZGkgOltdLAogICAgICAgIGRlc3NlcnRzTWlkaSA6IFtdLAogICAgICAgIGJvaXNzb25zTWlkaSA6IFtdLAogICAgICAgIGhvcmRPZXV2cmVzR2FzdHJvbm8gOiBbXSwKICAgICAgICBwbGF0c0dhc3Ryb25vIDpbXSwKICAgICAgICBkZXNzZXJ0c0dhc3Ryb25vIDogW10sCiAgICAgICAgcHJpeCA6IDAKICAgICAgfSAKICB9LAogIG1ldGhvZHMgOnsKICAgIGdldG1lbnVEZW1pZGkobWluLG1heCx0YWIsdGFiMil7CiAgICAgIHRoaXMucHJpeD0wCiAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCAzOyBpbmRleCsrKSB7CiAgICAgICAgCiAgICAgICAgbWluID0gTWF0aC5jZWlsKG1pbik7CiAgICAgICAgbWF4ID0gTWF0aC5mbG9vcihtYXgpOwogICAgICAgIHZhciBuZXdJbmRleD1NYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluKSkgKyBtaW47CiAgICAgICAgZm9yIChsZXQgaW5kZXgxPSAwOyBpbmRleDEgPCB0YWIubGVuZ3RoOyBpbmRleDErKykgewogICAgICAgICAgd2hpbGUgKG5ld0luZGV4ID09PSB0YWJbaW5kZXgxXSkgewogICAgICAgICAgICBuZXdJbmRleD1NYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluKSkgKyBtaW47CiAgICAgICAgICAgIGluZGV4MT0wOwogICAgICAgICAgfSAgICAKICAgICAgICB9CiAgICAgICAgdGFiLnB1c2gobmV3SW5kZXgpCiAgICAgICAgdGhpcy5wcml4ID0gdGhpcy5wcml4ICsgdGFiMltuZXdJbmRleF0ucHJpeDsKICAgICAgfSAgICAKICAgICAgcmV0dXJuIHRoaXMucHJpeDsgICAKICAgIH0sCiAgICBnZXRNZW51R2FzdHJvbm9taXF1ZShtaW4sbWF4LHRhYix0YWIyKXsKICAgICAgdGhpcy5wcml4PTAKICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IDI7IGluZGV4KyspIHsKICAgICAgICBtaW4gPSBNYXRoLmNlaWwobWluKTsKICAgICAgICBtYXggPSBNYXRoLmZsb29yKG1heCk7CiAgICAgICAgdmFyIG5ld0luZGV4PU1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4pKSArIG1pbjsKICAgICAgICBmb3IgKGxldCBpbmRleDE9IDA7IGluZGV4MSA8IHRhYi5sZW5ndGg7IGluZGV4MSsrKSB7CiAgICAgICAgICB3aGlsZSAobmV3SW5kZXggPT09IHRhYltpbmRleDFdKSB7CiAgICAgICAgICAgIG5ld0luZGV4PU1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4pKSArIG1pbjsKICAgICAgICAgICAgaW5kZXgxPTA7CiAgICAgICAgICB9ICAgIAogICAgICAgIH0KICAgICAgICB0YWIucHVzaChuZXdJbmRleCkKICAgICAgICB0aGlzLnByaXggPSB0aGlzLnByaXggKyB0YWIyW25ld0luZGV4XS5wcml4OwogICAgICB9ICAgICAgIAogICAgICByZXR1cm4gdGhpcy5wcml4OwogICAgfSwKICAgIC8vTm91cyBhbG9ucyBmYWlyZSB1bmUgZGltaW5pdGlvbiBkZSAyMCUgc3VyIGxlcyBtZW51cyBwYXIgcmFwcG9ydCDDoCBsYSBzb21tZSBkZXMgcHJpeCBpbml0aWF1eAogICAgZ2V0UHJpeCh4KXsKICAgICAgeD0geCAtIHgqMC4yOwogICAgICByZXR1cm4geAogICAgfQogIH0KfQoKCgo8L3NjcmlwdD4KCjwhLS0gQWRkICJzY29wZWQiIGF0dHJpYnV0ZSB0byBsaW1pdCBDU1MgdG8gdGhpcyBjb21wb25lbnQgb25seSAtLT4KPHN0eWxlIHNjb3BlZD4KCiAubWQtY2FyZCB7CiAgICB3aWR0aDogNTUwcHg7CiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7CiAgICB2ZXJ0aWNhbC1hbGlnbjogdG9wOwogICAgcGFkZGluZzogYXV0bzsKICB9CgogIC52aWV3cG9ydCB7CiAgICB3aWR0aDogNTUwcHg7CiAgICBtYXgtd2lkdGg6IDEwMCU7CiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7CiAgICB2ZXJ0aWNhbC1hbGlnbjogdG9wOwogICAgb3ZlcmZsb3c6IGF1dG87CiAgICBib3JkZXI6IDFweCBzb2xpZCBsaWdodGJsdWUgIWltcG9ydGFudDsKICB9CgogIGJ1dHRvbi5tZC1idXR0b24ubWQtcmFpc2VkLnByaXh7CiAgICBiYWNrZ3JvdW5kOiAjZjY3N2E4Y2M7CiAgICBjb2xvcjogYmxhY2s7CiB9CiAubWQtdG9vbGJhci5tZC1hY2NlbnQuaW5mb3MgewogICAgbWFyZ2luLWJvdHRvbTogMjVweDsKICAgIHRleHQtYWxpZ246IGNlbnRlcjsKICAgIG1hcmdpbi10b3A6IDE1cHg7Cn0KCmkuaW5mb3MgewogICAgZm9udC1zaXplOiAyMHB4OwogICAgdGV4dC1hbGlnbjogY2VudGVyOwogICAgbWFyZ2luLWxlZnQ6IDEwMHB4OwogICAgY29sb3I6IGJsYWNrOwogICAgbWFyZ2luLXRvcDogMTBweCAhaW1wb3J0YW50Owp9Cjwvc3R5bGU+Cgo="},null]}